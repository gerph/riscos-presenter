/*******************************************************************
 * File:        present
 * Purpose:     The main front end for the slide presentation tool
 * Author:      Gerph
 * Date:        18 Sep 2020
 ******************************************************************/

#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "swis.h"

#ifdef FORTIFY
#include "fortify.h"
#endif

#include "gcontext.h"
#include "slidemd.h"
#include "file.h"
#include "slidedeck_index.h"
#include "sliderender.h"
#include "screen.h"
#include "input.h"
#include "cursors.h"
#include "hourglass.h"
#include "banks.h"
#include "str.h"

// Define this to have the hourglass start as soon as we change page
#define HOURGLASS_IMMEDIATE


/* Define this to debug this file */
//#undef DEBUG
//#define DEBUG

#ifdef DEBUG
#define dprintf if (1) _swix(0x104,0), printf
#else
#define dprintf if (0) _swix(0x104,0), printf
#endif


#ifdef HOURGLASS_IMMEDIATE
#define hourglass_on() hourglass_start(1)
#endif


typedef struct slides_s {
    const char *filename;
    slidedeck_t *deck;
    sliderender_t *render;
} slides_t;


/*************************************************** Gerph *********
 Function:      slides_create
 Description:   Create the slide system, loading a file
 Parameters:    filename-> the file to load
 Returns:       slides_t for the loaded slides, or NULL if failed
 ******************************************************************/
slides_t *slides_create(const char *filename)
{
    slides_t *slides = calloc(1, sizeof(*slides));
    slidedeck_t *deck;
    const char *mddata;

    slides->filename = strdup(filename);
    if (slides->filename == NULL)
        goto fail_filename;

    mddata = file_read_string(slides->filename);
    if (mddata == NULL)
        goto fail_mddata;

    deck = slidemd_parse(mddata, strlen(mddata));
    if (deck == NULL)
        goto fail_parse;
    free((char*)mddata);
    mddata = NULL;

    slides->deck = deck;
    slides->render = sliderender_create(deck, 0, NULL);
    if (slides->render == NULL)
        goto fail_createrender;
    return slides;

fail_createrender:
    slidedeck_destroy(slides->deck);
fail_parse:
    free((char*)mddata);
fail_mddata:
    free((char*)slides->filename);
fail_filename:
    free(slides);
    return NULL;
}

/*************************************************** Gerph *********
 Function:      slides_destroy
 Description:   Destroy the slides system
 Parameters:    slides-> the slides to destroy
 Returns:       none
 ******************************************************************/
void slides_destroy(slides_t *slides)
{
    if (slides == NULL)
        return;

    sliderender_destroy(slides->render);
    slides->render = NULL;
    slidedeck_destroy(slides->deck);
    slides->deck = NULL;
    free((char*)slides->filename);
    slides->filename = NULL;
    free(slides);
}


/*************************************************** Gerph *********
 Function:      slides_reload
 Description:   Reload the slides, returning to the same slide we were in
 Parameters:    slides-> the slides to reload
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slides_reload(slides_t *slides)
{
    slidedeck_t *deck;
    sliderender_t *render;
    const char *mddata;
    int slide_number;

    /* This will take a moment, so make sure we use the hourglass */
    hourglass_on();

    mddata = file_read_string(slides->filename);
    if (mddata == NULL)
        goto fail_mddata;

    deck = slidemd_parse(mddata, strlen(mddata));
    if (deck == NULL)
        goto fail_parse;
    free((char*)mddata);
    mddata = NULL;

    render = sliderender_create(deck, 0, NULL);
    if (slides->render == NULL)
        goto fail_createrender;

    /* We were successful in reloading and creating items */
    slide_number = sliderender_get_slide(slides->render);
    if (slide_number >= deck->nslides)
        slide_number = deck->nslides - 1; /* Limit to the number of slides in the deck */

    if (sliderender_set_slide(render, slide_number))
    {
        slide_number = 0;
        sliderender_set_slide(render, 0);
    }

    {
        bbox_t bbox;
        sliderender_get_region(slides->render, &bbox);
        sliderender_set_region(render, &bbox);
    }

    /* All done, now get rid of the old deck and its properties */
    sliderender_destroy(slides->render);
    slides->render = NULL;
    slidedeck_destroy(slides->deck);
    slides->deck = NULL;

    /* And reassign our new ones */
    slides->deck = deck;
    slides->render = render;

    hourglass_off();

    /* Success */
    return 0;

fail_createrender:
    slidedeck_destroy(deck);
fail_parse:
    free((char*)mddata);
fail_mddata:

    hourglass_off();

    return 1;
}

/*************************************************** Gerph *********
 Function:      slides_setregion
 Description:   Set the render region for the slides
 Parameters:    slides-> the slides to set the region for
                bbox-> the bbox to set the region to
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slides_setregion(slides_t *slides, bbox_t *bbox)
{
    /* Currently nothing else to update in our cache */
    return sliderender_set_region(slides->render, bbox);
}


/*************************************************** Gerph *********
 Function:      slides_setregion_screen
 Description:   Set the render region for the slides to the whole screen
 Parameters:    slides-> the slides to set the region for
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slides_setregion_screen(slides_t *slides)
{
    bbox_t bbox = {0};
    bounds_t screen;

    if (screen_get_size(&screen))
        return 1;

    bbox.x1 = screen.width;
    bbox.y1 = screen.height;

    return sliderender_set_region(slides->render, &bbox);
}


/*************************************************** Gerph *********
 Function:      slides_select
 Description:   Select a slide to show
 Parameters:    slides-> the slides to show
                slide_number = slide number to select
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slides_select(slides_t *slides, int slide_number)
{
    if (sliderender_set_slide(slides->render, slide_number))
    {
        /* Failed to select slide */
        return 1;
    }

    return 0;
}


/*************************************************** Gerph *********
 Function:      slides_show
 Description:   Show the current slide
 Parameters:    slides-> the slides to show
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slides_show(slides_t *slides)
{
    /* Currently nothing else to do in this step */
    int fail;
    hourglass_on();
    banks_offscreen();
    fail = sliderender_show(slides->render);
    banks_show();
    hourglass_off();
    return fail;
}


/*************************************************** Gerph *********
 Function:      slides_next
 Description:   Move to the next slide
 Parameters:    slides-> the slides to control
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slides_next(slides_t *slides)
{
    /* Currently nothing else to do in this step */
    int slide = sliderender_get_slide(slides->render);
    slide += 1;
    if (sliderender_set_slide(slides->render, slide))
        return 1;

    return slides_show(slides);
}


/*************************************************** Gerph *********
 Function:      slides_previous
 Description:   Move to the previous slide
 Parameters:    slides-> the slides to control
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slides_previous(slides_t *slides)
{
    /* Currently nothing else to do in this step */
    int slide = sliderender_get_slide(slides->render);
    slide -= 1;
    if (sliderender_set_slide(slides->render, slide))
        return 1;

    return slides_show(slides);
}


/*************************************************** Gerph *********
 Function:      beep
 Description:   Issue a beep.
 Parameters:    none
 Returns:       none
 ******************************************************************/
void beep(void)
{
    _swix(0x107, 0);
}


#include "font.h"
#include "border.h"
#include "textblock.h"

#define PROMPT_BG COLOUR_RGB(224, 224, 224)
#define PROMPT_FG COLOUR_RGB(0, 0, 0)
#define PROMPT_MARGIN  (16)
#define PROMPT_PADDING (32)
#define PROMPT_BORDER  (16)


/*************************************************** Gerph *********
 Function:      prompt
 Description:   Prompt for some input
 Parameters:    slides-> the slides context to prompt in
                message-> message to write to the screen
                buffer-> the buffer to write to
                bufferlen = the length of the string to input
                width = width in OS units
                valid-> valid characters (or NULL to accept any ascii)
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int prompt(slides_t *slides,
           const char *message,
           char *buffer, int bufferlen,
           int width,
           const char *valid)
{
    textblock_t textblock;
    bbox_t region;
    bbox_t textbox;
    font_t font = sliderender_get_bodyfont(slides->render);
    bounds_t em = font_getem(font);
    int height = em.height * 2.5;
    int index = 0;
    int failed = -1;

    if (width == 0)
        width = em.width * strlen(message);

    sliderender_get_region(slides->render, &region);

    textbox.x0 = (region.x1 + region.x0 - width) / 2;
    textbox.x1 = (region.x1 + region.x0 + width) / 2;
    textbox.y0 = (region.y1 + region.y0 - height) / 2;
    textbox.y1 = (region.y1 + region.y0 + height) / 2;

    dprintf("Prompt textbox = %i,%i - %i,%i\n", textbox.x0, textbox.y0, textbox.x1, textbox.y1);

    *buffer = '\0';

    textblock  = textblock_create(textbox.x0, textbox.y0,
                                  textbox.x1, textbox.y1,
                                  TBCREATE_SPACING_120);

    while (failed == -1)
    {
        int pass;
        unsigned int ch;

        rect_fill(PROMPT_BG, textbox.x0 - (PROMPT_PADDING + PROMPT_BORDER + PROMPT_MARGIN),
                             textbox.y0 - (PROMPT_PADDING + PROMPT_BORDER + PROMPT_MARGIN),
                             textbox.x1 + (PROMPT_PADDING + PROMPT_BORDER + PROMPT_MARGIN),
                             textbox.y1 + (PROMPT_PADDING + PROMPT_BORDER + PROMPT_MARGIN));

        border_drawsimple(bt_groove, PROMPT_BORDER,
                          textbox.x0 - (PROMPT_PADDING + PROMPT_BORDER),
                          textbox.y1 + (PROMPT_PADDING + PROMPT_BORDER),
                          textbox.x1 - textbox.x0 + (PROMPT_PADDING + PROMPT_BORDER) * 2,
                          textbox.y1 - textbox.y0 + (PROMPT_PADDING + PROMPT_BORDER) * 2,
                          PROMPT_BG, COLOUR_NONE);

        /* Redraw the text block */
        for (pass=0; pass<2; pass++)
        {
            unsigned long flags = pass ? TBADD_PAINT : 0;
            textblock_add(textblock, font,
                          message,
                          PROMPT_BG, PROMPT_FG,
                          flags);
            textblock_newline(textblock);
            textblock_add(textblock, font,
                          "? ",
                          PROMPT_BG, PROMPT_FG,
                          flags);
            textblock_add(textblock, font,
                          buffer,
                          PROMPT_BG, PROMPT_FG,
                          flags);
            textblock_clear(textblock, TBCLEAR_TEXTTOP);
        }

        ch = input_key_block();
        switch (ch)
        {
            case KEY_DELETE:
                if (index > 0)
                    buffer[--index] = '\0';
                break;

            case KEY_ESCAPE:
                failed = 1;
                break;

            case KEY_ENTER:
                failed = 0;
                break;

            default:
                if (ch >= 32 && ch < 127)
                {
                    int is_addable = (!valid || strchr(valid, ch));
                    if (is_addable)
                    {
                        if (index < bufferlen - 1)
                        {
                            buffer[index++] = ch;
                            buffer[index] = '\0';
                        }
                    }
                }
                break;
        }
    }

    return failed;
}


/*************************************************** Gerph *********
 Function:      special_key
 Description:   Special handling, just for this talk - NOT part of
                the general presentation system.
 Parameters:    slides-> the slides objects we're working with
                key = the key press we're dealing with
 Returns:       1 if handled, 0 if not handled
 ******************************************************************/
int special_key(slides_t *slides, int key)
{
    static int special_escape = 0;
    static int hourglass = 0;
    static int pointer = 0;

    /*
        xC => Drop to CLI.
        xH => Hourglass on/off.
        xP => Pointer on/off.
     */
    switch (key)
    {
        case 'X':
        case 'x':
            special_escape = 1;
            return 1;
    }

    if (special_escape)
    {
        switch (key)
        {
            case 'C':
            case 'c':
                _swix(0x100 + 30, 0);
                _swix(OS_CLI, _IN(0), "GOS");
                break;

            case 'H':
            case 'h':
                if (special_escape)
                {
                    hourglass = !hourglass;
                    if (hourglass)
                        hourglass_on();
                    else
                        hourglass_smash();
                    special_escape = 0;
                    return 1;
                }
                break;

            case 'P':
            case 'p':
                if (special_escape)
                {
                    pointer = !pointer;
                    if (pointer)
                        _swix(OS_CLI, _IN(0), "Pointer 1");
                    else
                        _swix(OS_CLI, _IN(0), "Pointer 0");
                    special_escape = 0;
                    return 1;
                }
                break;
        }
    }

    special_escape = 0;
    return 0;
}


int main(int argc, char *argv[])
{
    char *in_filename = "file/md";
    slides_t *slides;
    int start_slide = 0;
    int is_list = 0;
    char *save_prefix = NULL;

    if (argc > 1)
    {
        in_filename = argv[1];
    }
    if (argc > 2)
    {
        if (strcmp(argv[2], "-list") == 0)
        {
            is_list = 1;
        }
        else if (strcmp(argv[2], "-save") == 0)
        {
            if (argc < 4)
            {
                printf("Syntax: %s <file> -save <prefix>\n", argv[0]);
                return 1;
            }
            save_prefix = argv[3];
        }
        else
        {
            start_slide = atoi(argv[2]);
        }
    }


#ifdef FORTIFY
    Fortify_EnterScope();
#endif

    gcontext_initvdu(1);
    banks_init();

    slides = slides_create(in_filename);
    if (slides == NULL)
    {
        printf("Failed to create slides for file '%s'\n", in_filename);
        exit(1);
    }
    if (slides_setregion_screen(slides))
    {
        printf("Could not select screen region\n");
    }

    if (slides_select(slides, start_slide))
    {
        printf("Could not select slide %i\n", start_slide);
        exit(1);
    }

    /* Show the index of slides? */
    if (is_list)
    {
        slidedeck_index(slides->deck);
        return 0;
    }

    /* Save all the slides? */
    if (save_prefix)
    {
        char cli[256];
        int n;
        for (n=0; n<slides->deck->nslides; n++)
        {
            _kernel_oserror *err;
            slides_select(slides, n);
            slides_show(slides);
            sprintf(cli, "Screensave %s%03i", save_prefix, n);
            if (!_kernel_oscli(cli))
            {
                err = _kernel_last_oserror();
                printf("Screensave failed: %s\n", err->errmess);
                return 1;
            }
        }
        return 0;
    }

#if 0
    {
        char buffer[6];
        printf("Prompting ...\n");
        prompt(slides, "Testing", buffer, sizeof(buffer), 0, NULL);
        exit(1);
    }
#endif

    if (slides_show(slides))
    {
        printf("Could not render slide %i\n", start_slide);
        exit(1);
    }

    {
        int quit = 0;
        cursors_off();
        while (!quit)
        {
            unsigned int key = input_key_block();
            dprintf("Key: %i\n", key);

            if (special_key(slides, key))
                continue;

            switch (key)
            {
                case 'Q':
                case 'q':
                    quit = 1;
                    break;

                case 'R':
                case 'r':
                    dprintf("Reload\n");
                    if (slides_reload(slides))
                    {
                        // Reload failed?!
                        dprintf("Reload failed\n");
                        beep();
                    }
                    else
                    {
                        slides_show(slides);
                    }
                    break;

                case KEY_RIGHT:
                case 'n':
                    if (slides_next(slides))
                    {
                        // Next slide failed
                        beep();
                    }
                    break;

                case KEY_LEFT:
                case 'p':
                    if (slides_previous(slides))
                    {
                        // Previous slide failed
                        beep();
                    }
                    break;

                case ':':
                    {
                        /* Select a slide number */
                        char buffer[5];
                        int failed;
                        failed = prompt(slides, "Select slide number", buffer, sizeof(buffer), 0, "0123456789");
                        if (!failed && buffer[0] != '\0')
                        {
                            int slide_number = atoi(buffer);
                            printf("Selected slide: %i\n", slide_number);
                            if (slides_select(slides, slide_number))
                            {
                                beep();
                            }

                            /* Refresh the screen, as we've corrupted it with the prompt */
                            slides_show(slides);
                        }
                    }
                    break;

                default:
                    /* Any fallback? */
                    break;
            }
        }
        cursors_on();
    }

    slides_destroy(slides);

#ifdef FORTIFY
    Fortify_LeaveScope();
#endif

    return 0;
}
