#include <stdlib.h>
#include <stdio.h>
#include "swis.h"

#include "gcontext.h"
#include "textblock.h"

#define FONT_SIZE 22*16
#define FONT_NAME "HirukoPro.Book.Oblique"
#define FONT_NAME2 "Optima.Regular"
#define FONT_ALTNAME "Homerton.Medium"

int main(int argc, char *argv[])
{
    void *f;
    void *f2;
    coords_t end;
    textblock_t textblock;
    int ytop = 640;
    int ytexttop = ytop - 16;
    int ylimit = ytexttop - 512;
    int i;

    gcontext_initvdu(1);
    rect_fill(0x4444FF00, 64, 64-16,  640, ytop);
    rect_outline(0x44440000, 64+16, ylimit,  640-16, ytexttop);

    textblock = textblock_create(64+16, ylimit,  640-16, ytexttop,
                                 TBCREATE_DEFAULT_SPACING);

    f = text_find(FONT_NAME, FONT_SIZE, FONT_SIZE);
    if (f == NULL)
        f = text_find(FONT_ALTNAME, FONT_SIZE, FONT_SIZE);
    f2 = text_find(FONT_NAME2, FONT_SIZE, FONT_SIZE);
    if (f2 == NULL)
        f2 = text_find(FONT_ALTNAME, FONT_SIZE, FONT_SIZE);
    printf("Font handle: %p, %p\n", f, f2);

    //_swix(OS_CLI, _IN(0), "Pyromaniacconfig timings.execute=true");
    //_swix(OS_CLI, _IN(0), "Pyromaniacconfig timings.swi=true");

    for (i=0; i < 2 ; i++)
    {
        unsigned long flags = (i==0) ? 0 : TBADD_PAINT;
        textblock_add(textblock, f, "Hello there this is a test of the text block system.",
                      0x4444FF00, 0xFFFFFF00, flags | TBADD_UNDERLINE);

        textblock_add(textblock, f2, "Here's some more text",
                      0x4444FF00, 0xFFFFFF00, flags | TBADD_UNDERLINE);

        textblock_add(textblock, f2, "strike",
                      0x4444FF00, 0xFFFFFF00, flags | TBADD_STRIKETHROUGH);

        textblock_clear(textblock, TBCLEAR_TEXTNEWLINE);
        textblock_add(textblock, f2, "Newline",
                      0x4444FF00, 0xFFFFFF00, flags);

        textblock_clear(textblock, TBCLEAR_TEXTNEWLINE);
        {
            bounds_t em = text_getemsize(f2);
            //printf("em = %i x %i\n", em.width, em.height);
            textblock_inset(textblock, em.width, em.width);

            textblock_add(textblock, f2, "1.",
                          0x4444FF00, 0xFFFFFF00, flags);

            textblock_inset(textblock, em.width * 1.5, em.width * 1.5);
            textblock_add(textblock, f2, "Text which wraps to the next line",
                          0x4444FF00, 0xFFFFFF00, flags);
        }
        textblock_clear(textblock, TBCLEAR_TEXTTOP | TBCLEAR_INSET | TBCLEAR_COVERED);
    }
    text_lose(f);
    text_lose(f2);

    getchar();
}
