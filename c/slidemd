/*******************************************************************
 * File:        slidemd
 * Purpose:     Parse the Markdown files and construct a slide deck
 *              for use with presenter
 * Author:      Gerph
 * Date:        17 Sep 2020
 ******************************************************************/

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "slidedeck.h"
#include "md4c.h"
#include "mdnames.h"

/* Define this to debug this file */
#undef DEBUG
//#define DEBUG

#ifdef DEBUG
#define dprintf if (1) _swix(0x104,0), printf
#else
#define dprintf if (0) _swix(0x104,0), printf
#endif

int enter_block(MD_BLOCKTYPE type, void *detail, void *userdata);
int leave_block(MD_BLOCKTYPE type, void *detail, void *userdata);
int enter_span(MD_SPANTYPE type, void *detail, void *userdata);
int leave_span(MD_SPANTYPE type, void *detail, void *userdata);
int text(MD_TEXTTYPE type, const MD_CHAR *text, MD_SIZE size, void *userdata);
void debug_log(const char *msg, void *userdata);


int enter_block(MD_BLOCKTYPE type, void *detail, void *userdata)
{
    slidedeck_t *deck = (slidedeck_t *)userdata;
    dprintf("enter_block: %i (%s)\n", type, MD_BLOCK_NAME(type));
    switch (type)
    {
        case MD_BLOCK_DOC:
            break;

        case MD_BLOCK_QUOTE:
            /* FIXME: Quote block not supported by slidedeck */
            break;

        case MD_BLOCK_UL:
            slidedeck_startblock(deck, sbt_list, SLIDEBLOCKINDEX_UNORDERED);
            break;

        case MD_BLOCK_OL:
            slidedeck_startblock(deck, sbt_list, SLIDEBLOCKINDEX_ORDERED);
            break;

        case MD_BLOCK_LI:
            slidedeck_newblock(deck, sbt_item, SLIDEBLOCKINDEX_NOINDEX);
            break;

        case MD_BLOCK_HR:
            slidedeck_newslide(deck);
            break;

        case MD_BLOCK_H:
            {
                MD_BLOCK_H_DETAIL *blockdetail = (MD_BLOCK_H_DETAIL *)detail;
                slidedeck_newblock(deck, sbt_heading, SLIDEBLOCKINDEX_HEADING(blockdetail->level));
            }
            break;

        case MD_BLOCK_CODE:
            slidedeck_newblock(deck, sbt_pre, SLIDEBLOCKINDEX_NOINDEX);
            break;

        case MD_BLOCK_HTML:
            /* HTML blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_P:
            slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
            break;

        case MD_BLOCK_TABLE:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_THEAD:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TBODY:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TR:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TH:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TD:
            /* Table blocks should not be seen - the option isn't enabled */
            break;
    }
    return 0;
}

int leave_block(MD_BLOCKTYPE type, void *detail, void *userdata)
{
    slidedeck_t *deck = (slidedeck_t *)userdata;
    dprintf("leave_block: %i (%s)\n", type, MD_BLOCK_NAME(type));
    switch (type)
    {
        case MD_BLOCK_DOC:
            break;

        case MD_BLOCK_QUOTE:
            break;

        case MD_BLOCK_UL:
            slidedeck_endblock(deck);
            break;

        case MD_BLOCK_OL:
            slidedeck_endblock(deck);
            break;

        case MD_BLOCK_LI:
            break;

        case MD_BLOCK_HR:
            break;

        case MD_BLOCK_H:
            break;

        case MD_BLOCK_CODE:
            break;

        case MD_BLOCK_HTML:
            break;

        case MD_BLOCK_P:
            break;

        case MD_BLOCK_TABLE:
            break;

        case MD_BLOCK_THEAD:
            break;

        case MD_BLOCK_TBODY:
            break;

        case MD_BLOCK_TR:
            break;

        case MD_BLOCK_TH:
            break;

        case MD_BLOCK_TD:
            break;

    }
    return 0;
}

int enter_span(MD_SPANTYPE type, void *detail, void *userdata)
{
    slidedeck_t *deck = (slidedeck_t *)userdata;
    dprintf("enter_span: %i (%s)\n", type, MD_SPAN_NAME(type));
    switch (type)
    {
        case MD_SPAN_EM:
            slidedeck_render_italic(deck, 1);
            break;

        case MD_SPAN_STRONG:
            slidedeck_render_bold(deck, 1);
            break;

        case MD_SPAN_A:
            // FIXME: No hyper link support - do we need it?
            break;

        case MD_SPAN_IMG:
            // FIXME: No image support
            break;

        case MD_SPAN_CODE:
            slidedeck_render_code(deck, 1);
            break;

        case MD_SPAN_DEL:
            slidedeck_render_del(deck, 1);
            break;

        case MD_SPAN_LATEXMATH:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_LATEXMATH_DISPLAY:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_WIKILINK:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_U:
            slidedeck_render_underline(deck, 1);
            break;
    }
    return 0;
}

int leave_span(MD_SPANTYPE type, void *detail, void *userdata)
{
    slidedeck_t *deck = (slidedeck_t *)userdata;
    dprintf("leave_span: %i (%s)\n", type, MD_SPAN_NAME(type));
    switch (type)
    {
        case MD_SPAN_EM:
            slidedeck_render_italic(deck, 0);
            break;

        case MD_SPAN_STRONG:
            slidedeck_render_bold(deck, 0);
            break;

        case MD_SPAN_A:
            // FIXME: No hyper link support - do we need it?
            break;

        case MD_SPAN_IMG:
            // FIXME: No image support
            break;

        case MD_SPAN_CODE:
            slidedeck_render_code(deck, 0);
            break;

        case MD_SPAN_DEL:
            slidedeck_render_del(deck, 0);
            break;

        case MD_SPAN_LATEXMATH:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_LATEXMATH_DISPLAY:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_WIKILINK:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_U:
            slidedeck_render_underline(deck, 0);
            break;
    }
    return 0;
}

int text(MD_TEXTTYPE type, const MD_CHAR *text, MD_SIZE size, void *userdata)
{
    slidedeck_t *deck = (slidedeck_t *)userdata;
    dprintf("text: %i (%s) [%.*s]\n", type, MD_TEXT_NAME(type), size, text);

    switch (type)
    {
        case MD_TEXT_NORMAL:
            slidedeck_addnspan(deck, text, size);
            break;

        case MD_TEXT_NULLCHAR:
            // We do not care about the null character
            break;

        case MD_TEXT_BR:
            /* FIXME: Literal <br> should probably become a linebreak, but we don't support those yet */
            slidedeck_addspan(deck, " ");
            break;

        case MD_TEXT_SOFTBR:
            /* Soft BR just means we wrap it to the prior strings */
            slidedeck_addspan(deck, " ");
            break;

        case MD_TEXT_ENTITY:
            /* FIXME: No entity expansion. Do we care? */
            break;

        case MD_TEXT_CODE:
            // The text for a code block may include a \n
            // FIXME: We don't support those form of multiline yet?
            // Maybe split each of these into sub blocks? Not thought about it.
            slidedeck_addnspan(deck, text, size);
            break;

        case MD_TEXT_HTML:
            // We should not get these as the option is turned off.
            break;

        case MD_TEXT_LATEXMATH:
            // We should not get these as the option is turned off.
            break;

    }
    return 0;
}

void debug_log(const char *msg, void *userdata)
{
    dprintf("Debug: %s\n", msg);
}


MD_PARSER parser = {
    0, /* ABI version */
    0 |
        MD_FLAG_UNDERLINE |
        MD_FLAG_COLLAPSEWHITESPACE |
        MD_FLAG_STRIKETHROUGH |
        MD_FLAG_NOHTML, /* Dialect options */

    /* Rendering callbacks... */
    enter_block,
    leave_block,
    enter_span,
    leave_span,
    text,

    debug_log, /* Debug callback */
    NULL, /* Reserved */
};


/*************************************************** Gerph *********
 Function:      slidemd_parse
 Description:   Parse markdown text into a set of slides
 Parameters:    text-> the text to parse
                len = the length of the text to parse, or -1 for 0-terminated string.
 Returns:       slidedeck, or NULL if failed.
 ******************************************************************/
slidedeck_t *slidemd_parse(const char *text, int len)
{
    slidedeck_t *deck;
    deck = slidedeck_create();
    if (deck == NULL)
        return NULL;

    md_parse(text, len == -1 ? strlen(text) : len, &parser, deck);

    return deck;
}
