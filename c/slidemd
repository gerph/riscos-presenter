/*******************************************************************
 * File:        slidemd
 * Purpose:     Parse the Markdown files and construct a slide deck
 *              for use with presenter
 * Author:      Gerph
 * Date:        17 Sep 2020
 ******************************************************************/

#include <assert.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "str.h"
#include "slidedeck.h"
#include "md4c.h"
#include "mdnames.h"

/* Define this to debug this file */
#undef DEBUG
//#define DEBUG

#ifdef DEBUG
#define dprintf if (1) _swix(0x104,0), printf
#else
#define dprintf if (0) _swix(0x104,0), printf
#endif

int enter_block(MD_BLOCKTYPE type, void *detail, void *userdata);
int leave_block(MD_BLOCKTYPE type, void *detail, void *userdata);
int enter_span(MD_SPANTYPE type, void *detail, void *userdata);
int leave_span(MD_SPANTYPE type, void *detail, void *userdata);
int text(MD_TEXTTYPE type, const MD_CHAR *text, MD_SIZE size, void *userdata);
void debug_log(const char *msg, void *userdata);


/* Working context for the slidemd parser */
typedef struct slidemd_s {
    slidedeck_t *deck;

    int starting_slide;         /* Whether we're just starting a slide (about to start with a p / in the p) */
    int deferred_p;             /* whether we've deferred the creation of a p block */
    int in_list;                /* Whether we're in a list */
    int in_quote;               /* Whether we're in a quote */
    int in_slide_properties;    /* Whether we've recognised that these are properties in this p */
} slidemd_t;


int enter_block(MD_BLOCKTYPE type, void *detail, void *userdata)
{
    slidemd_t *slidemd = (slidemd_t *)userdata;
    slidedeck_t *deck = slidemd->deck;

    dprintf("enter_block: %i (%s)\n", type, MD_BLOCK_NAME(type));
    switch (type)
    {
        case MD_BLOCK_DOC:
            /* We're in the very first slide, so we're starting a slide */
            slidemd->starting_slide = 1;
            slidemd->deferred_p = 0;
            break;

        case MD_BLOCK_QUOTE:
            slidedeck_newblock(deck, sbt_quote, SLIDEBLOCKINDEX_QUOTE(slidemd->in_quote));
            slidemd->in_quote += 1;
            break;

        case MD_BLOCK_UL:
            slidedeck_startblock(deck, sbt_list, SLIDEBLOCKINDEX_UNORDERED);
            slidemd->in_list += 1;
            break;

        case MD_BLOCK_OL:
            slidedeck_startblock(deck, sbt_list, SLIDEBLOCKINDEX_ORDERED);
            slidemd->in_list += 1;
            break;

        case MD_BLOCK_LI:
            slidedeck_newblock(deck, sbt_item, SLIDEBLOCKINDEX_NOINDEX);
            break;

        case MD_BLOCK_HR:
            slidedeck_newslide(deck);

            /* Moved toa new slide, so we're starting a slide */
            slidemd->starting_slide = 1;
            slidemd->deferred_p = 0;
            break;

        case MD_BLOCK_H:
            {
                MD_BLOCK_H_DETAIL *blockdetail = (MD_BLOCK_H_DETAIL *)detail;
                slidedeck_newblock(deck, sbt_heading, SLIDEBLOCKINDEX_HEADING(blockdetail->level));
            }
            break;

        case MD_BLOCK_CODE:
            slidedeck_newblock(deck, sbt_pre, SLIDEBLOCKINDEX_NOINDEX);
            break;

        case MD_BLOCK_HTML:
            /* HTML blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_P:
            if (slidemd->starting_slide)
            {
                /* We're now deferring a paragraph block start */
                slidemd->deferred_p = 1;
            }
            else
            {
                if (!slidemd->in_list && !slidemd->in_quote)
                {
                    slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
                }
            }
            break;

        case MD_BLOCK_TABLE:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_THEAD:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TBODY:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TR:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TH:
            /* Table blocks should not be seen - the option isn't enabled */
            break;

        case MD_BLOCK_TD:
            /* Table blocks should not be seen - the option isn't enabled */
            break;
    }

    if (slidemd->starting_slide)
    {
        if (type != MD_BLOCK_P && type != MD_BLOCK_DOC && type != MD_BLOCK_HR)
        {
            /* If the first block isn't any of these, we're not starting the slide any more */
            slidemd->starting_slide = 0;
        }
    }
    return 0;
}

int leave_block(MD_BLOCKTYPE type, void *detail, void *userdata)
{
    slidemd_t *slidemd = (slidemd_t *)userdata;
    slidedeck_t *deck = slidemd->deck;

    dprintf("leave_block: %i (%s)\n", type, MD_BLOCK_NAME(type));
    switch (type)
    {
        case MD_BLOCK_DOC:
            break;

        case MD_BLOCK_QUOTE:
            slidemd->in_quote -= 1;
            dprintf("  now quote level %i\n", slidemd->in_quote);
            if (slidemd->in_quote != 0)
                slidedeck_newblock(deck, sbt_quote, SLIDEBLOCKINDEX_QUOTE(slidemd->in_quote));
            break;

        case MD_BLOCK_UL:
            slidedeck_endblock(deck);
            slidemd->in_list -= 1;
            break;

        case MD_BLOCK_OL:
            slidedeck_endblock(deck);
            slidemd->in_list -= 1;
            break;

        case MD_BLOCK_LI:
            break;

        case MD_BLOCK_HR:
            break;

        case MD_BLOCK_H:
            break;

        case MD_BLOCK_CODE:
            break;

        case MD_BLOCK_HTML:
            break;

        case MD_BLOCK_P:
            /* Once we finish a paragraph we are definitely not in the starting slide, or processing properties */
            slidemd->starting_slide = 0;
            slidemd->in_slide_properties = 0;
            slidemd->deferred_p = 0;
            break;

        case MD_BLOCK_TABLE:
            break;

        case MD_BLOCK_THEAD:
            break;

        case MD_BLOCK_TBODY:
            break;

        case MD_BLOCK_TR:
            break;

        case MD_BLOCK_TH:
            break;

        case MD_BLOCK_TD:
            break;

    }
    return 0;
}

int enter_span(MD_SPANTYPE type, void *detail, void *userdata)
{
    slidemd_t *slidemd = (slidemd_t *)userdata;
    slidedeck_t *deck = slidemd->deck;

    dprintf("enter_span: %i (%s)\n", type, MD_SPAN_NAME(type));

    if (slidemd->deferred_p)
    {
        /* If we hit any span type, we're not in the starting slide any more */
        slidemd->deferred_p = 0;
        slidemd->in_slide_properties = 0;
        slidemd->starting_slide = 0;
        slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
    }

    switch (type)
    {
        case MD_SPAN_EM:
            slidedeck_render_italic(deck, 1);
            break;

        case MD_SPAN_STRONG:
            slidedeck_render_bold(deck, 1);
            break;

        case MD_SPAN_A:
            // FIXME: No hyper link support - do we need it?
            break;

        case MD_SPAN_IMG:
            // FIXME: No image support
            {
                MD_SPAN_IMG_DETAIL *img = (MD_SPAN_IMG_DETAIL *)detail;
                dprintf("  Image source '%.*s'\n", img->src.size, img->src.text);
                dprintf("  Image title '%.*s'\n", img->title.size, img->title.text);
                slidedeck_addspan_imagen(deck, img->src.text, img->src.size);
            }
            break;

        case MD_SPAN_CODE:
            slidedeck_render_code(deck, 1);
            break;

        case MD_SPAN_DEL:
            slidedeck_render_del(deck, 1);
            break;

        case MD_SPAN_LATEXMATH:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_LATEXMATH_DISPLAY:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_WIKILINK:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_U:
            slidedeck_render_underline(deck, 1);
            break;
    }
    return 0;
}

int leave_span(MD_SPANTYPE type, void *detail, void *userdata)
{
    slidemd_t *slidemd = (slidemd_t *)userdata;
    slidedeck_t *deck = slidemd->deck;

    dprintf("leave_span: %i (%s)\n", type, MD_SPAN_NAME(type));
    switch (type)
    {
        case MD_SPAN_EM:
            slidedeck_render_italic(deck, 0);
            break;

        case MD_SPAN_STRONG:
            slidedeck_render_bold(deck, 0);
            break;

        case MD_SPAN_A:
            // FIXME: No hyper link support - do we need it?
            break;

        case MD_SPAN_IMG:
            // FIXME: No image support
            break;

        case MD_SPAN_CODE:
            slidedeck_render_code(deck, 0);
            break;

        case MD_SPAN_DEL:
            slidedeck_render_del(deck, 0);
            break;

        case MD_SPAN_LATEXMATH:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_LATEXMATH_DISPLAY:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_WIKILINK:
            // We should not get this as the option is turned off
            break;

        case MD_SPAN_U:
            slidedeck_render_underline(deck, 0);
            break;
    }
    return 0;
}

int text(MD_TEXTTYPE type, const MD_CHAR *text, MD_SIZE size, void *userdata)
{
    slidemd_t *slidemd = (slidemd_t *)userdata;
    slidedeck_t *deck = slidemd->deck;

    dprintf("text: %i (%s) [%.*s]\n", type, MD_TEXT_NAME(type), size, text);

    if (slidemd->deferred_p)
    {
        /* If we hit any text type that isn't 'normal', we're not in the starting slide any more */
        if (type != MD_TEXT_NORMAL &&
            type != MD_TEXT_SOFTBR)
        {
            slidemd->deferred_p = 0;
            slidemd->in_slide_properties = 0;
            slidemd->starting_slide = 0;
            slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
        }
    }

    switch (type)
    {
        case MD_TEXT_NORMAL:
            if (slidemd->starting_slide)
            {
                /* Properties must be in the format:
                 *  [a-zA-Z0-9_\.-]+:<space>
                 */
                int is_property = 0;
                char *colon = memchr(text, ':', size);
                if (colon && colon != text && colon - text < size - 2 && colon[1] == ' ')
                {
                    int i;
                    is_property = 1;
                    for (i=0; i<colon-text; i++)
                    {
                        char c = text[i];
                        if (c != '.' &&
                            c != '_' &&
                            c != '-' &&
                            !isalpha(c) &&
                            !isdigit(c))
                        {
                            dprintf("  makes it not a property: %c\n", c);
                            is_property = 0;
                        }
                    }
                }
                dprintf("  might be a property: %i\n", is_property);

                if (!slidemd->in_slide_properties)
                {
                    /* We've not recognised the slide properties yet, so this may be a slide property */
                    if (is_property)
                    {
                        /* It is; all is well ! */
                        slidemd->in_slide_properties = 1;
                    }
                    else
                    {
                        /* It's not, so we need to reset the values and start the block we deferred */
                        if (slidemd->deferred_p)
                            slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
                        slidemd->deferred_p = 0;
                        slidemd->in_slide_properties = 0;
                        slidemd->starting_slide = 0;
                    }
                }

                if (slidemd->in_slide_properties)
                {
                    if (is_property)
                    {
                        /* We have a slide property, so set it */
                        char *name = strndup(text, colon-text);
                        char *value;
                        value = colon + 1;
                        while (*value == ' ')
                            value++; /* Skip spaces after the colon */
                        value = strndup(value, size - (value-text));
                        dprintf("Set Slide property '%s' to '%s'\n", name, value);
                        slidedeck_addproperty(deck, name, value);
                        free(name);
                        free(value);
                    }
                    else
                    {
                        dprintf("Cannot parse text that should be a property: '%.*s'\n", size, text);
                    }
                }
            }
            if (!slidemd->in_slide_properties)
            {
                slidedeck_addspan_textn(deck, text, size);
            }
            break;

        case MD_TEXT_NULLCHAR:
            // We do not care about the null character
            break;

        case MD_TEXT_BR:
            /* Literal <br> should probably becomes a linebreak - we detect a span with just \n in */
            slidedeck_addspan_text(deck, "\n");
            break;

        case MD_TEXT_SOFTBR:
            /* Soft BR just means we wrap it to the prior strings */
            if (!slidemd->in_slide_properties)
                slidedeck_addspan_text(deck, " ");
            break;

        case MD_TEXT_ENTITY:
            /* FIXME: No entity expansion. Do we care? */
            break;

        case MD_TEXT_CODE:
            // The text for a code block may include a \n
            // FIXME: We don't support those form of multiline yet?
            // Maybe split each of these into sub blocks? Not thought about it.
            slidedeck_addspan_textn(deck, text, size);
            break;

        case MD_TEXT_HTML:
            // We should not get these as the option is turned off.
            break;

        case MD_TEXT_LATEXMATH:
            // We should not get these as the option is turned off.
            break;

    }
    return 0;
}

void debug_log(const char *msg, void *userdata)
{
    dprintf("Debug: %s\n", msg);
}


MD_PARSER parser = {
    0, /* ABI version */
    0 |
        MD_FLAG_UNDERLINE |
        MD_FLAG_COLLAPSEWHITESPACE |
        MD_FLAG_STRIKETHROUGH |
        MD_FLAG_NOHTML, /* Dialect options */

    /* Rendering callbacks... */
    enter_block,
    leave_block,
    enter_span,
    leave_span,
    text,

    debug_log, /* Debug callback */
    NULL, /* Reserved */
};


/*************************************************** Gerph *********
 Function:      slidemd_parse
 Description:   Parse markdown text into a set of slides
 Parameters:    text-> the text to parse
                len = the length of the text to parse, or -1 for 0-terminated string.
 Returns:       slidedeck, or NULL if failed.
 ******************************************************************/
slidedeck_t *slidemd_parse(const char *text, int len)
{
    slidemd_t slidemd;
    slidedeck_t *deck;
    deck = slidedeck_create();
    if (deck == NULL)
        return NULL;

    slidemd.deck = deck;
    slidemd.starting_slide = 0;
    slidemd.in_list = 0;
    slidemd.in_quote = 0;
    slidemd.in_slide_properties = 0;

    md_parse(text, len == -1 ? strlen(text) : len, &parser, &slidemd);

    return deck;
}
