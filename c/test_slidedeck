#include <stdlib.h>
#include <stdio.h>
#include "slidedeck.h"

void slidedeck_dumpindent(int indent)
{
    while (indent--)
        printf("  ");
}

void slidedeck_dumpspan(slidedeck_t *deck, slidespan_t *span, int indent)
{
    int has_attribs = 0;
    slidedeck_dumpindent(indent);
    printf("Span text: '%s'\n", span->text);

    if (span->render.code)
    {
        if (!has_attribs)
            slidedeck_dumpindent(indent), has_attribs = 1;
        printf("  Code");
    }
    if (span->render.italic)
    {
        if (!has_attribs)
            slidedeck_dumpindent(indent), has_attribs = 1;
        printf("  Italic");
    }
    if (span->render.bold)
    {
        if (!has_attribs)
            slidedeck_dumpindent(indent), has_attribs = 1;
        printf("  Bold");
    }
    if (span->render.underline)
    {
        if (!has_attribs)
            slidedeck_dumpindent(indent), has_attribs = 1;
        printf("  Underline");
    }
    if (span->render.del)
    {
        if (!has_attribs)
            slidedeck_dumpindent(indent), has_attribs = 1;
        printf("  Del");
    }

    if (has_attribs)
        printf("\n");
}


void slidedeck_dumpblock(slidedeck_t *deck, slideblock_t *block, int indent)
{
    slidedeck_dumpindent(indent);
    printf("Block type %i\n", block->blocktype);
    switch (block->blocktype)
    {
        case sbt_heading:
            slidedeck_dumpindent(indent);
            printf("  Heading %i\n", block->index);
            break;

        case sbt_list:
            slidedeck_dumpindent(indent);
            if (block->index == -1)
                printf("  List unordered\n");
            else
                printf("  List ordered, next index %i\n", block->index);
            break;

        case sbt_item:
            slidedeck_dumpindent(indent);
            if (block->index == -1)
                printf("  Item unordered\n");
            else
                printf("  Item ordered, index %i\n", block->index);
            break;
    }
    if (block->blocks)
    {
        /* Has nested blocks */
        slideblock_t *nest;

        for (nest = block->blocks; nest; nest=nest->next)
        {
            slidedeck_dumpblock(deck, nest, indent + 1);
        }
    }
    if (block->spans)
    {
        slidespan_t *span;
        for (span = block->spans; span; span=span->next)
        {
            slidedeck_dumpspan(deck, span, indent + 1);
        }
    }
}


void slidedeck_dump(slidedeck_t *deck)
{
    int slide_number;

    for (slide_number = 0; slide_number < deck->nslides; slide_number++)
    {
        slide_t *slide = deck->slides[slide_number];
        slideblock_t *block;
        printf("Slide #%i\n", slide_number);

        for (block = slide->blocks; block; block=block->next)
        {
            slidedeck_dumpblock(deck, block, 1);
        }
    }
}


int main(int argc, char *argv[])
{
    slidedeck_t *deck;

    deck = slidedeck_create();

    slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
    slidedeck_addspan(deck, "Hello ");
    slidedeck_addspan(deck, "World!");

    slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
    slidedeck_addspan(deck, "And again");
    slidedeck_render_bold(deck, 1);
    slidedeck_addspan(deck, " (but bold");
    slidedeck_render_italic(deck, 1);
    slidedeck_addspan(deck, ", and italic)");

    slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
    slidedeck_addspan(deck, "More");

    slidedeck_newblock(deck, sbt_heading, SLIDEBLOCKINDEX_HEADING(1));
    slidedeck_addspan(deck, "HEADING");

    slidedeck_startblock(deck, sbt_list, SLIDEBLOCKINDEX_ORDERED);
    slidedeck_newblock(deck, sbt_item, SLIDEBLOCKINDEX_NOINDEX);
    slidedeck_addspan(deck, "Item 1");
    slidedeck_newblock(deck, sbt_item, SLIDEBLOCKINDEX_NOINDEX);
    slidedeck_addspan(deck, "Item 2");
    slidedeck_endblock(deck);

    slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
    slidedeck_addspan(deck, "Top level text");

    slidedeck_newslide(deck);

    slidedeck_newblock(deck, sbt_plain, SLIDEBLOCKINDEX_NOINDEX);
    slidedeck_addspan(deck, "Top level text");

    printf("----\n");
    slidedeck_dump(deck);

}
