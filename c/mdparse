/*******************************************************************
 * File:        mdparse
 * Purpose:     Parse the Markdown files for use with presenter
 * Author:      Gerph
 * Date:        17 Sep 2020
 ******************************************************************/

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "md4c.h"

/* Define this to debug this file */
//#undef DEBUG
#define DEBUG

#ifdef DEBUG
#define dprintf if (1) _swix(0x104,0), printf
#else
#define dprintf if (0) _swix(0x104,0), printf
#endif

int enter_block(MD_BLOCKTYPE type, void *detail, void *userdata);
int leave_block(MD_BLOCKTYPE type, void *detail, void *userdata);
int enter_span(MD_SPANTYPE type, void *detail, void *userdata);
int leave_span(MD_SPANTYPE type, void *detail, void *userdata);
int text(MD_TEXTTYPE type, const MD_CHAR *text, MD_SIZE size, void *userdata);
void debug_log(const char *msg, void *userdata);

const char *md_block_names[] = {
        "DOC",
        "QUOTE",
        "UL",
        "OL",
        "LI",
        "HR",
        "H",
        "CODE",
        "HTML",
        "P",
        "TABLE",
        "THEAD",
        "TBODY",
        "TR",
        "TH",
        "TD",
    };
#define MD_BLOCK_NAMES_COUNT (sizeof(md_block_names) / sizeof(md_block_names[0]))
#define MD_BLOCK_NAME(type) ((type) < MD_BLOCK_NAMES_COUNT ? md_block_names[type] : "unknown")

const char *md_span_names[] = {
        "EM",
        "STRONG",
        "A",
        "IMG",
        "CODE",
        "DEL",
        "LATEXMATH",
        "LATEXMATH_DISPLAY",
        "WIKILINK",
        "U",
    };
#define MD_SPAN_NAMES_COUNT (sizeof(md_span_names) / sizeof(md_span_names[0]))
#define MD_SPAN_NAME(type) ((type) < MD_SPAN_NAMES_COUNT ? md_span_names[type] : "unknown")

const char *md_text_names[] = {
        "NORMAL",
        "NULLCHAR",
        "BR",
        "SOFTBR",
        "ENTITY",
        "CODE",
        "HTML",
        "LATEXMATH",
    };
#define MD_TEXT_NAMES_COUNT (sizeof(md_text_names) / sizeof(md_text_names[0]))
#define MD_TEXT_NAME(type) ((type) < MD_TEXT_NAMES_COUNT ? md_text_names[type] : "unknown")


int enter_block(MD_BLOCKTYPE type, void *detail, void *userdata)
{
    printf("enter_block: %i (%s)\n", type, MD_BLOCK_NAME(type));
    switch (type)
    {
        case MD_BLOCK_DOC:
            break;

        case MD_BLOCK_QUOTE:
            break;

        case MD_BLOCK_UL:
            break;

        case MD_BLOCK_OL:
            break;

        case MD_BLOCK_LI:
            break;

        case MD_BLOCK_HR:
            break;

        case MD_BLOCK_H:
            break;

        case MD_BLOCK_CODE:
            break;

        case MD_BLOCK_HTML:
            break;

        case MD_BLOCK_P:
            break;

        case MD_BLOCK_TABLE:
            break;

        case MD_BLOCK_THEAD:
            break;

        case MD_BLOCK_TBODY:
            break;

        case MD_BLOCK_TR:
            break;

        case MD_BLOCK_TH:
            break;

        case MD_BLOCK_TD:
            break;

    }
    return 0;
}

int leave_block(MD_BLOCKTYPE type, void *detail, void *userdata)
{
    printf("leave_block: %i (%s)\n", type, MD_BLOCK_NAME(type));
    switch (type)
    {
        case MD_BLOCK_DOC:
            break;

        case MD_BLOCK_QUOTE:
            break;

        case MD_BLOCK_UL:
            break;

        case MD_BLOCK_OL:
            break;

        case MD_BLOCK_LI:
            break;

        case MD_BLOCK_HR:
            break;

        case MD_BLOCK_H:
            break;

        case MD_BLOCK_CODE:
            break;

        case MD_BLOCK_HTML:
            break;

        case MD_BLOCK_P:
            break;

        case MD_BLOCK_TABLE:
            break;

        case MD_BLOCK_THEAD:
            break;

        case MD_BLOCK_TBODY:
            break;

        case MD_BLOCK_TR:
            break;

        case MD_BLOCK_TH:
            break;

        case MD_BLOCK_TD:
            break;

    }
    return 0;
}

int enter_span(MD_SPANTYPE type, void *detail, void *userdata)
{
    printf("enter_span: %i (%s)\n", type, MD_SPAN_NAME(type));
    switch (type)
    {
        case MD_SPAN_EM:
            break;

        case MD_SPAN_STRONG:
            break;

        case MD_SPAN_A:
            break;

        case MD_SPAN_IMG:
            break;

        case MD_SPAN_CODE:
            break;

        case MD_SPAN_DEL:
            break;

        case MD_SPAN_LATEXMATH:
            break;

        case MD_SPAN_LATEXMATH_DISPLAY:
            break;

        case MD_SPAN_WIKILINK:
            break;

        case MD_SPAN_U:
            break;
    }
    return 0;
}

int leave_span(MD_SPANTYPE type, void *detail, void *userdata)
{
    printf("leave_span: %i (%s)\n", type, MD_SPAN_NAME(type));
    switch (type)
    {
        case MD_SPAN_EM:
            break;

        case MD_SPAN_STRONG:
            break;

        case MD_SPAN_A:
            break;

        case MD_SPAN_IMG:
            break;

        case MD_SPAN_CODE:
            break;

        case MD_SPAN_DEL:
            break;

        case MD_SPAN_LATEXMATH:
            break;

        case MD_SPAN_LATEXMATH_DISPLAY:
            break;

        case MD_SPAN_WIKILINK:
            break;

        case MD_SPAN_U:
            break;
    }
    return 0;
}

int text(MD_TEXTTYPE type, const MD_CHAR *text, MD_SIZE size, void *userdata)
{
    printf("text: %i (%s) [%.*s]\n", type, MD_TEXT_NAME(type), size, text);
    return 0;
}

void debug_log(const char *msg, void *userdata)
{
    printf("Debug: %s\n", msg);
}


MD_PARSER parser = {
    0, /* ABI version */
    0, /* Dialect options */

    /* Rendering callbacks... */
    enter_block,
    leave_block,
    enter_span,
    leave_span,
    text,

    debug_log, /* Debug callback */
    NULL, /* Reserved */
};


/*************************************************** Gerph *********
 Function:      file_read
 Description:   Read the contents of a file into a block.
 Parameters:    filename-> the file to read
 Returns:       pointer to the file content
 ******************************************************************/
const char *file_read(const char *filename)
{
    char *content;
    long size;
    FILE *f = fopen(filename, "rb");
    if (f == NULL)
        return NULL;

    fseek(f, 0, SEEK_END);
    size = ftell(f);
    fseek(f, 0, SEEK_SET);

    content = malloc(size + 1);
    if (content == NULL)
    {
        fclose(f);
        return NULL;
    }
    fread(content, 1, size, f);
    fclose(f);

    content[size] = '\0';
    return content;
}


int main(int argc, char *argv[])
{
    char *in_filename = "file/md";
    const char *mddata;

    mddata = file_read(in_filename);
    assert(mddata);

    md_parse(mddata, strlen(mddata), &parser, NULL);

    return 0;
}
