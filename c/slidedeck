/*******************************************************************
 * File:        slidedeck
 * Purpose:     Holds information about a deck of slides - multiple
 *              related slides that contain content to be presented.
 * Author:      Gerph
 * Date:        17 Sep 2020
 ******************************************************************/

#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"

#ifdef FORTIFY
#include "fortify.h"
#endif

#include "slidedeck.h"
#include "str.h"

/* Define this to debug this file */
#undef DEBUG
//#define DEBUG

#ifdef DEBUG
#define dprintf if (1) _swix(0x104,0), printf
#else
#define dprintf if (0) _swix(0x104,0), printf
#endif

#define UNDERLINE_OFFSET (4)


renderattribs_t sliderender_default = {0,0,0,0,0};

#define SLIDE_BLOCK(slide) ((slide)->currentblock ? (slide)->currentblock->lastblock : (slide)->lastblock)


/*************************************************** Gerph *********
 Function:      slidedeck_create
 Description:   Create a new slide deck, with an initial slide
 Parameters:    none
 Returns:       pointer to the slidedeck, or NULL if failed to allocate
 ******************************************************************/
slidedeck_t *slidedeck_create(void)
{
    slidedeck_t *deck = calloc(1, sizeof(*deck));
    if (deck == NULL)
        return NULL;

    deck->nslides = 0;
    deck->slides = NULL;
    deck->lastslide = NULL;
    deck->properties = opt_create();
    if (deck->properties == NULL)
    {
        free(deck);
        return NULL;
    }

    if (slidedeck_newslide(deck))
    {
        free(deck);
        opt_destroy(deck->properties);
        return NULL;
    }
    return deck;
}


/*************************************************** Gerph *********
 Function:      slidedeck_destroyspan
 Description:   Destroy a given span
 Parameters:    span-> the span to destroy
 Returns:       none
 ******************************************************************/
static void slidedeck_destroyspan(slidespan_t *span)
{
    switch (span->type)
    {
        case sst_text:
            {
                free((char*)span->data.text.text);
                span->data.text.text = NULL;
            }
            break;

        case sst_image:
            {
                free((char*)span->data.image.name);
                span->data.image.name = NULL;
            }
            break;
    }
    free(span);
}


/*************************************************** Gerph *********
 Function:      slidedeck_destroyblock
 Description:   Destroy a given block
 Parameters:    block-> the block to destroy
 Returns:       none
 ******************************************************************/
static void slidedeck_destroyblock(slideblock_t *block)
{
    slideblock_t *inner_block;
    slidespan_t *span;

    /* Destroy all the blocks inside this block */
    for (inner_block=block->blocks; inner_block; )
    {
        slideblock_t *next = inner_block->next;
        slidedeck_destroyblock(inner_block);
        inner_block = next;
    }
    block->blocks = NULL;

    /* And all the spans */
    for (span=block->spans; span; )
    {
        slidespan_t *next = span->next;
        slidedeck_destroyspan(span);
        span = next;
    }
    block->spans = NULL;
    free(block);
}

/*************************************************** Gerph *********
 Function:      slidedeck_destroyslide
 Description:   Destroy a given slide
 Parameters:    slide-> the slide to destroy
 Returns:       none
 ******************************************************************/
static void slidedeck_destroyslide(slide_t *slide)
{
    slideblock_t *block;
    for (block=slide->blocks; block; )
    {
        slideblock_t *next = block->next;
        slidedeck_destroyblock(block);
        block = next;
    }
    slide->blocks = NULL;
    opt_destroy(slide->properties);
    slide->properties = NULL;
    free(slide);
}


/*************************************************** Gerph *********
 Function:      slidedeck_destroy
 Description:   Create a new slide deck, with an initial slide
 Parameters:    deck-> the slide deck to destroy
 Returns:       none
 ******************************************************************/
void slidedeck_destroy(slidedeck_t *deck)
{
    int n;
    if (!deck)
        return;

    for (n=0; n<deck->nslides; n++)
    {
        slide_t *slide = deck->slides[n];
        deck->slides[n] = NULL;
        slidedeck_destroyslide(slide);
    }
    opt_destroy(deck->properties);
    deck->properties = NULL;
    free(deck->slides);
    deck->slides = NULL;
    free(deck);
}


/*************************************************** Gerph *********
 Function:      slidedeck_newslide
 Description:   Create a new slide within the deck
 Parameters:    deck-> the slide deck to add to
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_newslide(slidedeck_t *deck)
{
    slide_t **new_slides;
    slide_t *slide;

    slide = calloc(1, sizeof(*slide));
    if (slide == NULL)
        return 1;

    /* Extend the slide array */
    new_slides = realloc(deck->slides, sizeof(slide_t*) * (deck->nslides+1));
    if (new_slides == NULL)
    {
        free(slide);
        return 1;
    }

    /* Initialise the slide data */
    slide->index = deck->nslides - 1; /* 0-indexed */
    slide->blocks = NULL;
    slide->properties = opt_copy(deck->properties);
    if (slide->properties == NULL)
    {
        free(slide);
        free(new_slides);
        return 1;
    }

    deck->slides = new_slides;
    deck->slides[deck->nslides] = slide;
    deck->nslides++;
    deck->lastslide = slide;

    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_newblock
 Description:   Create a new block within a slide
 Parameters:    deck-> the slide deck to add a block to
                blocktype = the type of block to add
                index = the index for the new block (only for heading or list type)
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_newblock(slidedeck_t *deck, slideblocktype_t blocktype, int index)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block;

    block = calloc(1, sizeof(*block));
    if (block == NULL)
        return 1;

    /* Initialise the block */
    block->parent = NULL;
    block->next = NULL;
    block->blocktype = blocktype;
    block->index = index;
    block->spans = NULL;
    block->lastspan = NULL;
    block->blocks = NULL;
    block->lastblock = NULL;
    block->current_render = sliderender_default;

    /* Attach to the slide */
    if (slide->currentblock)
    {
        /* This block needs to be chained on to an existing block (nested list items) */
        if (slide->currentblock->lastblock)
            slide->currentblock->lastblock->next = block;
        else
            slide->currentblock->blocks = block;
        slide->currentblock->lastblock = block;
        if (slide->currentblock->index == -1)
        {
            block->index = -1; /* The current block has no index, so the newly added block should not have one either */
        }
        else
        {
            /* Only increment when the block we add is an 'item' */
            if (blocktype == sbt_item)
                block->index = slide->currentblock->index++;
            else
                block->index = -1;
        }

        block->parent = slide->currentblock;
    }
    else
    {
        /* This block needs to be chained on to the end of the slide */
        if (slide->lastblock)
            slide->lastblock->next = block;
        else
            slide->blocks = block;
        slide->lastblock = block;
    }

    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_startblock
 Description:   Create a new block within a slide, and start a chain within it.
                Only useful for the sbt_list blockstype
 Parameters:    deck-> the slide deck to add a block to
                blocktype = the type of block to add
                index = the index for the new block (only for heading or list type)
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_startblock(slidedeck_t *deck, slideblocktype_t blocktype, int index)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block;
    int failed = slidedeck_newblock(deck, blocktype, index);
    if (failed)
        return 1;

    /* Make the new block the one we'll add to */
    block = SLIDE_BLOCK(slide);
    slide->currentblock = block;
    block->index = index;

    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_endblock
 Description:   End a block (used when we're coming out of a list)
                Only useful for the sbt_list blockstype
 Parameters:    deck-> the slide deck to add a block to
                blocktype = the type of block to add
                index = the index for the new block (only for heading or list type)
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_endblock(slidedeck_t *deck)
{
    slide_t *slide = deck->lastslide;
    assert(slide->currentblock); /* FIXME: Decide if this should be an assertion or just a return 1 */
    slide->currentblock = slide->currentblock->parent;
    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_addspan_textn
 Description:   Add a text span element to the current block, for limited number of bytes
 Parameters:    deck-> the slide deck to add a span to
                text-> text to add
                len = length of text to add from the string
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_addspan_textn(slidedeck_t *deck, const char *text, int len)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block = SLIDE_BLOCK(slide);
    slidespan_t *span;
    assert(block != NULL);

    dprintf("slidedeck_addspan_textn(%p, '%.*s')\n", deck, len, text);
    dprintf("  slide = %p, block = %p\n", slide, block);

    span = calloc(1, sizeof(*span));
    if (span == NULL)
        return 1;

    span->type = sst_text;

    /* Configure the span */
    span->data.text.text = strndup(text, len);
    if (span->data.text.text == NULL)
    {
        free(span);
        return 1;
    }
    span->data.text.render = block->current_render;

    /* Link to chain */
    if (block->lastspan)
        block->lastspan->next = span;
    else
        block->spans = span;
    block->lastspan = span;

    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_addspan_text
 Description:   Add a text span element to the current block
 Parameters:    deck-> the slide deck to add a span to
                text-> text to add
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_addspan_text(slidedeck_t *deck, const char *text)
{
    return slidedeck_addspan_textn(deck, text, strlen(text));
}


/*************************************************** Gerph *********
 Function:      slidedeck_addspan_imagen
 Description:   Add an image span element to the current block, for limited number of bytes
 Parameters:    deck-> the slide deck to add a span to
                name-> image name to add
                len = length of text to add from the string
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_addspan_imagen(slidedeck_t *deck, const char *name, int len)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block = SLIDE_BLOCK(slide);
    slidespan_t *span;
    assert(block != NULL);

    dprintf("slidedeck_addspan_imagen(%p, '%.*s')\n", deck, len, name);
    dprintf("  slide = %p, block = %p\n", slide, block);

    span = calloc(1, sizeof(*span));
    if (span == NULL)
        return 1;

    span->type = sst_image;

    /* Configure the span */
    span->data.image.name = strndup(name, len);
    if (span->data.image.name == NULL)
    {
        free(span);
        return 1;
    }

    /* Link to chain */
    if (block->lastspan)
        block->lastspan->next = span;
    else
        block->spans = span;
    block->lastspan = span;

    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_addspan_image
 Description:   Add an image span element to the current block
 Parameters:    deck-> the slide deck to add a span to
                name-> image name to add
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_addspan_image(slidedeck_t *deck, const char *name)
{
    return slidedeck_addspan_imagen(deck, name, strlen(name));
}


/*************************************************** Gerph *********
 Function:      slidedeck_render_*
 Description:   Change the render properties for a render property
 Parameters:    deck-> the slide deck to add a block to
                state = 1 to enable italic, 0 to disable
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_render_italic(slidedeck_t *deck, int state)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block = SLIDE_BLOCK(slide);

    if (!block)
        return 1;

    block->current_render.italic = state;
    return 0;
}
int slidedeck_render_bold(slidedeck_t *deck, int state)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block = SLIDE_BLOCK(slide);

    if (!block)
        return 1;

    block->current_render.bold = state;
    return 0;
}
int slidedeck_render_code(slidedeck_t *deck, int state)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block = SLIDE_BLOCK(slide);

    if (!block)
        return 1;

    block->current_render.code = state;
    return 0;
}
int slidedeck_render_underline(slidedeck_t *deck, int state)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block = SLIDE_BLOCK(slide);

    if (!block)
        return 1;

    block->current_render.underline = state;
    return 0;
}
int slidedeck_render_del(slidedeck_t *deck, int state)
{
    slide_t *slide = deck->lastslide;
    slideblock_t *block = SLIDE_BLOCK(slide);

    if (!block)
        return 1;

    block->current_render.del = state;
    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_addproperty
 Description:   Set a property on the current slide, and the whole deck.
 Parameters:    deck-> the slide deck to add a property to
                id-> property id string
                value-> property value string
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_addproperty(slidedeck_t *deck, const char *id, const char *value)
{
    slide_t *slide = deck->lastslide;
    optval *opt;
    int fail;

    /* First change the current slide properties */
    opt = opt_findopt(slide->properties, id);
    if (opt)
        fail = opt_change(opt, value);
    else
        fail = opt_add(slide->properties, id, value);

    if (fail)
        return 1;

    /* Then the global properties to carry forward */
    opt = opt_findopt(deck->properties, id);
    if (opt)
        fail = opt_change(opt, value);
    else
        fail = opt_add(deck->properties, id, value);
    if (fail)
    {
        opt_remove(slide->properties, opt_findopt(slide->properties, id));
        return 1;
    }
    return 0;
}


/*************************************************** Gerph *********
 Function:      slidedeck_delproperty
 Description:   Remove a property on the current slide, and the whole deck.
 Parameters:    deck-> the slide deck to add a property to
                id-> property id string
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int slidedeck_delproperty(slidedeck_t *deck, const char *id)
{
    slide_t *slide = deck->lastslide;
    optval *opt;
    int fail;

    /* First change the current slide properties */
    opt = opt_findopt(slide->properties, id);
    if (opt)
        opt_remove(slide->properties, opt);

    /* Then the global properties to carry forward */
    opt = opt_findopt(deck->properties, id);
    if (opt)
        opt_remove(deck->properties, opt);

    return 0;
}


/*************************************************** Gerph *********
 Function:      slide_getproperty
 Description:   Read a property from a slide
 Parameters:    slide-> the slide to read
                id-> property id string
                default_value-> value to return if no property present
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
const char *slide_getproperty(slide_t *slide, const char *id, const char *default_value)
{
    const char *value = opt_lookup(slide->properties, id);
    if (value == NULL)
        value = default_value;
    return value;
}
