/*******************************************************************
 * File:        image
 * Purpose:     Image rendering and management functions
 * Author:      Gerph
 * Date:        23 Sep 2020
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include "swis.h"

#include "ImageFileRender/ImageFileRender.h"
#include "ImageFileRender/ImageFileRenderSWIs.h"

#include "gcontext.h"
#include "file.h"
#include "str.h"
#include "image.h"


/* Define this to debug this file */
//#undef DEBUG
#define DEBUG

#ifdef DEBUG
#define dprintf if (1) _swix(0x104,0), printf
#else
#define dprintf if (0) _swix(0x104,0), printf
#endif


struct image_s {
    const char *name;

    filedata_t imagedata;
};

typedef struct ifr_tofit_s {
    int width;
    int height;
    int border;
    int angle;
} ifr_tofit_t;


/*************************************************** Gerph *********
 Function:      image_create
 Description:   Create a new holder for image data
 Parameters:    name-> the name of the image
 Returns:       image_t pointer, or NULL if failed to create
 ******************************************************************/
image_t *image_create(const char *name)
{
    image_t *image = calloc(1, sizeof(*image));
    if (image == NULL)
        return NULL;

    image->name = strdup(name);
    if (image->name == NULL)
    {
        free(image);
        return NULL;
    }
    image->imagedata.data = NULL;
    image->imagedata.datalen = 0;
    image->imagedata.filetype = -1;

    return image;
}


/*************************************************** Gerph *********
 Function:      image_destroy
 Description:   Destroy the space used by an image
 Parameters:    image-> the image to destroy
 Returns:       none
 ******************************************************************/
void image_destroy(image_t *image)
{
    if (!image)
        return;

    free(image->imagedata.data);
    image->imagedata.data = NULL;
    free(image);
}


/*************************************************** Gerph *********
 Function:      image_loadfile
 Description:   Load a file into the image block
 Parameters:    image-> the image to populate
                filename-> the filename to load
 Returns:       1 if failed, or 0 if successful
 ******************************************************************/
int image_loadfile(image_t *image, const char *filename)
{
    if (image->imagedata.data)
    {
        free(image->imagedata.data);
        image->imagedata.data = NULL;
        image->imagedata.datalen = 0;
        image->imagedata.filetype = -1;
    }

    if (file_read_data(filename, &image->imagedata))
        return 1;

    return 0;
}


/*************************************************** Gerph *********
 Function:      image_render_tofit
 Description:   Given a bounding box, put the image in it
 Parameters:    image-> the image to draw
                bbox-> the box to put the image within
 Returns:       1 if failed, 0 if successful
 ******************************************************************/
int image_render_tofit(image_t *image, bbox_t *bbox)
{
    _kernel_oserror *err;
    ifr_tofit_t tofit;
    if (image->imagedata.data == NULL)
    {
        dprintf("No image data to render\n");
        return 1;
    }

    tofit.width = bbox->x1 - bbox->x0;
    tofit.height = bbox->y1 - bbox->y0;
    tofit.border = 0;
    tofit.angle = 0;

    err = _swix(ImageFileRender_Render, _INR(0,8),
                                        TRANSFORMTYPE_SIZE |
                                            FLAG_IGNORE_DOCUMENT_OFFSET |
                                            (15<<FLAG_QUALITY_SHIFT),
                                        image->imagedata.filetype,
                                        image->imagedata.data,
                                        image->imagedata.datalen,
                                        NULL, /* Ext data */
                                        SEQUENCE_LAST, /* Last item */
                                        bbox->x0, bbox->y0,
                                        &tofit);
    if (err)
    {
        dprintf("Failed to render: %s\n", err->errmess);
        return 1;
    }

    return 0;
}
